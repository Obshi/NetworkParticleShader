// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Emit
#pragma kernel Update

struct Particle {
	float3 pos;
	float3 start;
	float3 end;
	float3 vec;
	float time;
	float lifeTime;
	int active;
};

RWStructuredBuffer<Particle> particles;

float4 basePoints[10];
float deltaTime;
float globalTime;

float rand(float2 seed)
{
	return frac(sin(dot(seed.xy, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(8, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
	Particle p = particles[id.x];
	p.active = 1;
	p.time = rand(float2(id.x, id.x * 5)) * 1;
	p.lifeTime = 1 + rand(float2(id.x, globalTime / 3)) * 4;

	particles[id.x] = p;
}

[numthreads(8, 1, 1)]
void Emit(uint3 id : SV_DispatchThreadID)
{
	Particle p = particles[id.x];
	if (p.active == 0)Init(id);
}

[numthreads(8,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{   
	Particle p = particles[id.x];
	float limit = p.time / p.lifeTime;
	float dis = sqrt(pow(p.start.x - p.end.x, 2) + pow(p.start.z - p.end.z, 2)) / 3;
    float noise = 0.05;
    if (limit <= 1) {
		p.time += deltaTime;
		p.pos.x = p.start.x * (1 - limit) + p.end.x * limit + sin(limit * 3.1415) * ( 2 * rand(float2(id.x, 3)) - 1) * noise;
		p.pos.z = p.start.z * (1 - limit) + p.end.z * limit + sin(limit * 3.1415) *  (2 * rand(float2(id.x, 2)) - 1) * noise;
		p.pos.y = p.start.y * (1 - limit) + p.end.y * limit + sin(limit * 3.1415) * dis + sin(limit * 3.1415) *  (2 * rand(float2(id.x, 6)) - 1) * noise;
	}
	else {
		p.active = 0;
	}

	particles[id.x] = p;
}
